{"ast":null,"code":"import _slicedToArray from \"/home/stewart/ColtReact/09-functions-as-props-lightsout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/stewart/ColtReact/09-functions-as-props-lightsout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/stewart/ColtReact/09-functions-as-props-lightsout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/stewart/ColtReact/09-functions-as-props-lightsout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/stewart/ColtReact/09-functions-as-props-lightsout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/stewart/ColtReact/09-functions-as-props-lightsout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/stewart/ColtReact/09-functions-as-props-lightsout/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nRows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.nCols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          nCols = _this$props.nCols,\n          nRows = _this$props.nRows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        console.log(y, x);\n\n        if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n          board[y][x] = !board[y][x];\n        }\n      } // Flip Initial Cell\n\n\n      flipCell(y, x); // TODO: flip this cell and the cells around it\n\n      flipCell(y, x + 1);\n      flipCell(y, x - 1);\n      flipCell(y + 1, x);\n      flipCell(y - 1, x); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // if the game is won, just show a winning msg & render nothing else\n      if (this.state.hasWon) {\n        return /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 14\n          }\n        }, \"YOU WIN!\");\n      } // make table board\n\n\n      var tableBoard = [];\n\n      for (var y = 0; y < this.props.nRows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var key = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: key,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(key);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 18\n            }\n          }));\n        };\n\n        for (var x = 0; x < this.props.nCols; x++) {\n          _loop(x);\n        }\n\n        tableBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 23\n          }\n        }, row));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Board-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-orange\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }\n      }, \"Lights Out\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-blue\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }\n      }, \"  Game\")), /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      }, tableBoard)));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nRows: 5,\n  nCols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/home/stewart/ColtReact/09-functions-as-props-lightsout/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nRows","row","x","nCols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","console","log","every","cell","setState","tableBoard","key","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 0.25,\n  };\n\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    };\n\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y=0; y < this.props.nRows; y++){\n      let row =[]\n      for(let x=0; x < this.props.nCols; x++){\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {nCols, nRows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      console.log(y, x);\n      if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // Flip Initial Cell\n    flipCell(y,x);\n    \n    // TODO: flip this cell and the cells around it\n    flipCell(y, x+1);\n    flipCell(y, x-1);\n    flipCell(y+1, x);\n    flipCell(y-1, x);\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n    if(this.state.hasWon){\n      return <h1>YOU WIN!</h1>\n    }\n    // make table board\n    let tableBoard =[];\n    for(let y=0; y<this.props.nRows; y++){\n      let row=[];\n      for(let x=0; x < this.props.nCols; x++){\n        let key = `${y}-${x}`;\n        row.push(<Cell \n                  key={key} \n                  isLit={this.state.board[y][x]}\n                  flipCellsAroundMe={()=>this.flipCellsAround(key)} \n                  />\n                );\n      }\n      tableBoard.push(<tr>{row}</tr>);\n    }\n    return (\n      <div> \n        <div className='Board-title'>\n          <div className='neon-orange'>Lights Out</div>\n          <div className='neon-blue'>  Game</div>\n        </div>\n        <table className=\"Board\">\n          <tbody>\n            {tableBoard}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}